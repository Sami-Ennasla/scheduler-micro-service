### Scheduler Microservice API Tests
### Base URL: http://localhost:3000
### Created for testing - Sami

### 1. Health Check
GET http://localhost:3000/health

### 2. Root Endpoint
GET http://localhost:3000/

### 3. Get All Jobs
GET http://localhost:3000/jobs

### 4. Get Active Jobs Only
GET http://localhost:3000/jobs/active

### 5. Get Jobs by Status
GET http://localhost:3000/jobs/status/pending
GET http://localhost:3000/jobs/status/running
GET http://localhost:3000/jobs/status/completed
GET http://localhost:3000/jobs/status/failed

### 6. Create HTTP Request Job (test)
POST http://localhost:3000/jobs
Content-Type: application/json

{
  "name": "API Health Check",
  "description": "Periodic health check of external API",
  "cronExpression": "*/10 * * * *",
  "type": "http_request",
  "config": {
    "url": "https://httpbin.org/get",
    "method": "GET",
    "headers": {
      "User-Agent": "Scheduler-Microservice"
    },
    "timeout": 5000
  }
}

### 7. Create Email Job
POST http://localhost:3000/jobs
Content-Type: application/json

{
  "name": "Daily Report Email",
  "description": "Send daily report email to stakeholders",
  "cronExpression": "0 9 * * *",
  "type": "email",
  "config": {
    "to": "stakeholders@company.com",
    "subject": "Daily System Report",
    "template": "daily_report",
    "smtp": {
      "host": "smtp.company.com",
      "port": 587,
      "secure": false
    }
  }
}

### 8. Create Function Call Job
POST http://localhost:3000/jobs
Content-Type: application/json

{
  "name": "Data Cleanup",
  "description": "Clean up old data files",
  "cronExpression": "0 2 * * *",
  "type": "function_call",
  "config": {
    "function": "cleanupOldData",
    "parameters": {
      "retentionDays": 30,
      "fileTypes": ["log", "tmp", "cache"]
    }
  }
}

### 9. Create Notification Job
POST http://localhost:3000/jobs
Content-Type: application/json

{
  "name": "System Alert",
  "description": "Send system status notification",
  "cronExpression": "*/15 * * * *",
  "type": "notification",
  "config": {
    "channel": "slack",
    "webhook": "https://hooks.slack.com/services/xxx/yyy/zzz",
    "message": "System status check completed",
    "priority": "info"
  }
}

### 10. Get Specific Job (replace {jobId} with actual ID)
GET http://localhost:3000/jobs/82a46178-afc5-4a0e-8c07-c73be593a146

### 11. Update Job (replace {jobId} with actual ID)
PATCH http://localhost:3000/jobs/{jobId}
Content-Type: application/json

{
  "name": "Updated Job Name",
  "description": "Updated description",
  "cronExpression": "0 */2 * * *",
  "isActive": true
}

### 12. Activate Job (replace {jobId} with actual ID)
POST http://localhost:3000/jobs/82a46178-afc5-4a0e-8c07-c73be593a146/activate

### 13. Deactivate Job (replace {jobId} with actual ID)
POST http://localhost:3000/jobs/82a46178-afc5-4a0e-8c07-c73be593a146/deactivate

### 14. Execute Job Manually (replace {jobId} with actual ID)
POST http://localhost:3000/jobs/{jobId}/execute

### 15. Delete Job (replace {jobId} with actual ID)
DELETE http://localhost:3000/jobs/{jobId}

### 16. Scheduler Status
GET http://localhost:3000/scheduler/status

### 17. Swagger Documentation
GET http://localhost:3000/api

### 18. Test Invalid Job Creation (should return 400)
POST http://localhost:3000/jobs
Content-Type: application/json

{
  "name": "Invalid Job",
  "cronExpression": "invalid cron",
  "type": "invalid_type"
}

### 19. Test Job with Invalid Cron Expression (should return 400)
POST http://localhost:3000/jobs
Content-Type: application/json

{
  "name": "Invalid Cron Job",
  "description": "Job with invalid cron expression",
  "cronExpression": "99 99 99 99 99",
  "type": "http_request",
  "config": {
    "url": "https://example.com"
  }
}

### 20. Test Job without Required Fields (should return 400)
POST http://localhost:3000/jobs
Content-Type: application/json

{
  "description": "Missing required fields"
}

### 21. Get Non-existent Job (should return 404)
GET http://localhost:3000/jobs/00000000-0000-0000-0000-000000000000

### 22. Update Non-existent Job (should return 404)
PATCH http://localhost:3000/jobs/00000000-0000-0000-0000-000000000000
Content-Type: application/json

{
  "name": "Non-existent Job"
}

### 23. Delete Non-existent Job (should return 404)
DELETE http://localhost:3000/jobs/00000000-0000-0000-0000-000000000000

### 24. Complex HTTP Request Job
POST http://localhost:3000/jobs
Content-Type: application/json

{
  "name": "Complex API Call",
  "description": "Make a complex API call with authentication",
  "cronExpression": "0 */6 * * *",
  "type": "http_request",
  "config": {
    "url": "https://api.example.com/data",
    "method": "POST",
    "headers": {
      "Authorization": "Bearer your-token-here",
      "Content-Type": "application/json",
      "Accept": "application/json"
    },
    "body": {
      "query": "SELECT * FROM users WHERE last_login > '2024-01-01'",
      "limit": 100
    },
    "timeout": 10000,
    "retryAttempts": 3
  }
}

### 25. Email Job with Attachments
POST http://localhost:3000/jobs
Content-Type: application/json

{
  "name": "Weekly Report with Attachments",
  "description": "Send weekly report with PDF attachments",
  "cronExpression": "0 8 * * 1",
  "type": "email",
  "config": {
    "to": ["manager@company.com", "director@company.com"],
    "cc": ["team@company.com"],
    "subject": "Weekly Performance Report",
    "template": "weekly_report",
    "attachments": [
      {
        "filename": "report.pdf",
        "path": "/reports/weekly-report.pdf"
      },
      {
        "filename": "metrics.xlsx",
        "path": "/reports/metrics.xlsx"
      }
    ],
    "smtp": {
      "host": "smtp.company.com",
      "port": 587,
      "secure": false,
      "auth": {
        "user": "reports@company.com",
        "pass": "secure-password"
      }
    }
  }
}

### 26. Function Call with Complex Parameters
POST http://localhost:3000/jobs
Content-Type: application/json

{
  "name": "Database Maintenance",
  "description": "Perform database maintenance tasks",
  "cronExpression": "0 3 * * 0",
  "type": "function_call",
  "config": {
    "function": "performDatabaseMaintenance",
    "parameters": {
      "tasks": [
        "vacuum",
        "analyze",
        "reindex"
      ],
      "databases": ["users", "orders", "analytics"],
      "backup": true,
      "backupPath": "/backups/",
      "notifyOnCompletion": true
    }
  }
}

### 27. Slack Notification Job
POST http://localhost:3000/jobs
Content-Type: application/json

{
  "name": "Deployment Notification",
  "description": "Notify team about successful deployments",
  "cronExpression": "0 10 * * *",
  "type": "notification",
  "config": {
    "channel": "slack",
    "webhook": "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX",
    "message": "Daily deployment completed successfully! ðŸš€",
    "attachments": [
      {
        "color": "good",
        "fields": [
          {
            "title": "Environment",
            "value": "Production",
            "short": true
          },
          {
            "title": "Status",
            "value": "Success",
            "short": true
          }
        ]
      }
    ]
  }
}

### 28. Get Jobs with Pagination (if implemented)
GET http://localhost:3000/jobs?page=1&limit=10

### 29. Search Jobs by Name (if implemented)
GET http://localhost:3000/jobs/search?name=report

### 30. Get Job Execution History (if implemented)
GET http://localhost:3000/jobs/{jobId}/history

### Environment Variables (for HTTPYac)
@baseUrl = http://localhost:3000
@jobId = 20108f7c-a662-492d-8aad-63165bff17ea

### Usage Instructions:
### 1. Make sure the scheduler microservice is running on localhost:3000
### 2. Use HTTPYac to send these requests
### 3. Replace {jobId} placeholders with actual job IDs from your responses
### 4. The @baseUrl and @jobId variables can be used in HTTPYac for easier testing
### 5. Some endpoints may return 404 if the job doesn't exist - this is expected behavior
